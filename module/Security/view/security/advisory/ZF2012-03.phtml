<h2>ZF2012-03: Potential XSS Vectors in Multiple Zend Framework 2 Components</h2>

<p>
    <code>Zend\Debug</code>, <code>Zend\Feed\PubSubHubbub</code>, 
    <code>Zend\Log\Formatter\Xml</code>, <code>Zend\Tag\Cloud\Decorator</code>, 
    <code>Zend\Uri</code>, <code>Zend\View\Helper\HeadStyle</code>, 
    <code>Zend\View\Helper\Navigation\Sitemap</code>, 
    and <code>Zend\View\Helper\Placeholder\Container\AbstractStandalone</code>
    were not using <code>Zend\Escaper</code> when escaping HTML, HTML 
    attributes, and/or URLs. While most were performing some escaping, because
    they were not using context-appropriate escaping mechanisms, they could 
    potentially be exploited to perform Cross Site Scripting (XSS) attacks.
</p>

<h3>Action Taken</h3>

<p>
    Each component and/or class was evaluated to determine which context-appropriate 
    escaping mechanism should be used, and the appropriate method from 
    <code>Zend\Escaper\Escaper</code> was then used. In most cases, this also involved
    composing the Escaper class as an injectible dependency.
</p>

<p>
    In the case of <code>Zend\Tag\Cloud\Decorator</code>, the <code>HtmlCloud</code> 
    and <code>HtmlTag</code> decorators were found to lack validation of user-provided
    HTML element and attribute names. Logic was added to validate these and raise an
    exception if invalid.
</p>

<p>
    This patch has been applied starting in versions 2.0.1 of Zend Framework, as well
    as to the 2.1 development branch.
</p>

<h3>Recommendations</h3>

<p>
    If you are using any of the components listed, we recommend 
    upgrading to 2.0.1 or greater.
</p>

<h2>Other Information</h2>
<h3>Acknowledgments</h3>

<p>
    The Zend Framework team thanks the following for working with us to help 
    protect its users:
</p>

<ul class="ul">
    <li>Robert Basic</li>
</ul>

<?php echo $this->render('security/policy'); ?>

